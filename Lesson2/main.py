"""
    Функции в питоне. Функция - это своего рода именованный участок кода,
    который может использоваться несколько раз и с разными параметрами, если
    они есть. Объявляется функция с помощью ключевого слова def, затем пишется название
    функции, затем в скобках идут имена переменных - параметров, далее идёт двоеточие и пишется
    тело функции. Пример (функция сложения двух переменных):
"""


def summ(a, b):
    print(a + b)


summ(5, 2)  # вызов функции (её использование), вывод: 7

"""
    Ещё такое правило: перед объявлением функции должно быть 2 пустые строки
    (если это не начало файла), а также после тела функции должно быть 2 пустые строки
"""

# Пример функции сложения двух переменных, но с возвратом значения:


def summ2(a, b):
    return a + b


c = summ2(6, 8)  # с помощью return мы сохраняем результат выполнения функции в переменную c
print(c)  # здесь выводим эту переменную, вывод: 14

# Можно сделать даже так:

print(summ2(int(input()), int(input())))

"""
    Сверху мы выводим результат выполнения функции summ2 сразу в print, а как
    аргументы мы передаём им функции int(input()), то есть вводим с консоли и печатаем
    вывод, при это всё это - в одну строчку. Такие "сокращения" очень популярны, особенно
    в питоне (и это мы увидим, когда будем проходить списочные выражения)
"""

"""
    Напишу ещё один пример функции нахождения чисел, делящихся на 3, до числа, введённого
    пользователем:
"""


def count3(a):
    count = 0
    for i in range(a):
        if i % 3 == 0:
            count += 1
    return count


print(count3(int(input())))  # если ввести число 12, то ответ будет 3 (3, 6, 9), 12 не входит в
# диапазон цикла for

"""
    Питон обладает огромным арсеналом встроенных функций, вот некоторые из них:
"""

a = "123"
b = int(a)  # функция перевода из строки в число

a = 123
b = str(a)  # функция перевода из числа в строку

a = "Hello!"
print(len(a))
a = [1, 2, 7, 3, 6]
print(len(a))  # функция нахождения длины строки или массива

a = [2, 5, 2, 7, 8]
print(sorted(a))  # функция, возвращающая отсортированный список

a.sort()  # метод, превращающий а в отсортированный список
# Отличие метода sort() от функции sorted() в том, что sort() изменяет исходный список

a = [1, 654, 2, 6, 6, 3, 1]
print(sum(a))  # находит сумму всех чисел в массиве (даже если они дробные)

"""
    Ещё один момент по поводу типов переменных, являющихся параметрами функции. Эти
    типы можно указать, однако если использовать типы данных, не соответствующие указанным,
    то никакой ошибки не будет, а интерпретатор просто выдаст предупреждение. Пример:
"""


def summ1(a: int, b: int):  # указываем, что используем целые числа
    return a + b


print(summ1(5, 8))  # при использовании функции пишем как аргументы целые числа - всё хорошо
print(summ1(5.8, 2.2))  # используем дробные числа вместо целых - интерпретатор выдаст предупреждение,
# однако функция нормально отработает

"""
    Иногда это нужно, чтобы указать будущим разработчикам, что какая-то функция рассчитана, например,
    только на использование строк, а если вписать туда число, то будет ошибка именно внутри тела
    функции (например, использование методов, которые есть только у строк, но нет у чисел)
"""
