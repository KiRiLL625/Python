"""
    Python (питон/пайтон) - скриптовый язык программирования.
    В основном используется для машинного обучения, веб-разработки,
    разработки небольших приложений. Он очень прост в синтаксисе, однако есть
    и обратная сторона: питон довольно медленный (например, в отличие от Java или С++) из-за того,
    что это интерпретируемый язык программирования (инструкции языка переводятся в машинный код последовательно),
    а не компилируемый, где сразу весь код переводится в машинный (Java, C++ и так далее); из-за
    своей динамической типизации (это круто, но медленно) и других причин. Теперь к самому языку.
"""

# Для начала - однострочный комментарий - через решётку (от решётки отступ 1 пробел, от кода желательно
# 2 пробела), многострочный комментарий - через тройные кавычки, как написан комментарий в самом верху)

"""
    Питон также немного придирчив к синтаксису: в конце файла должна быть пустая строка, после
    функций нужен отступ в 2 строки. Это необязательно выполнять, но среда разработки будет
    выдавать предупреждение
"""

"""
    Наконец-то сам язык. Основа любого зыка программирования - переменные. Здесь не нужно указывать
    тип переменной, просто пишем сразу название и значение. Точек с запятой здесь ставить не нужно
    вообще нигде.
"""

a = 0  # создали переменную а и присвоили значение 0

# В питоне нельзя разбить на объявление переменной и присвоение ей значения.
"""
    В Java можно было сделать так:
    int a; - объявили переменную
    a = 0; - присвоили ей значение
    
    В питоне нужно обязательно присвоить переменной какое-то значение, хотя бы 0.
"""

# Динамическая типизация - изменение типа переменной по ходу выполнения программы.

b = 1
b = "Hello, World!"

# Переменная b была целым числом, а затем стала строкой
# Типы данных те же самые, что и в Java, только их не нужно писать

print(b)  # функция вывода информации в консоль - выведет Hello, World!

"""
    Ещё один момент - в питоне нет никакого метода main. Код запускается просто по порядку.
"""

# Правила названия переменных те же самые - цифры не могут быть вначале, но при этом название
# может начинаться с нижнего подчёркивания

"""
    В отличие от функции вывода в консоль в Java (System.out.println()/System.out.print())
    функция print() в питоне принимает множество аргументов, а также разделяет их в соответствии
    с указаниями разработчика. Пример:
"""

a = 1234
b = "Хэй!"
print(a, b)  # Вывод: 1234 Хэй!

"""
    По умолчанию переменные разделяются пробелом, а в конце происходит перенос на новую строку.
    Но есть специальные аттрибуты end и sep, которые помогают разделять переменные произвольными символами.
    Пример:
"""

a = 1234
b = "Хэй!"
c = 5.0
print(a, b, c, sep="--")  # Вывод: 1234--Хэй!--5.0
print(a, b, c, end="|||")  # Вывод: 1234 Хэй! 5.0|||
print(a, b, c, sep="--", end="|||")  # Вывод: 1234--Хэй!--5.0|||

a = input()  # input() - функция ввода из консоли
b = int(input())  # int() - функция, превращающая строку в число
c = float(input())  # float() - функция, превращающая строку в дробное число

"""
    То есть если мы хотим ввести просто какую-то строку - пишем input(). Если
    хотим ввести целое число - пишем int(input()). Если хотим ввести дробное число - 
    пишем float(input()). Если мы напишем int(input()) или float(input()) и введём "123qwerty", то интерпретатор
    выдаст ошибку.
    
    Также у функции input() есть необязательный параметр - мы можем внутри скобок написать какой-то
    текст и он будет выведен перед тем как что-то вводить.
"""

print(a, b, c)  # выводим то, что ввели сверху

"""
    Забыл совсем сказать про тип boolean. Он тут тоже есть, только слова
    True, False пишутся с большой буквы.
"""

a = True
b = False
print(a, b)  # Вывод: True False

"""
    Условия (if). То же самое, что в Java, только снтаксис немного другой.
"""

login = input()
if login == "1234":
    print("Слишком просто!")
else:
    print("Слишком сложно!")

"""
    Тут мы сравниваем значение переменной login со значением 1234. Если login равно 1234, то
    выведется "Слишком просто!", если login не равно 1234, то выведется "Слишком сложно!".
    Круглые скобки в условии ставить не нужно, но по желанию их можно добавить, если так
    более понятно или их можно добавить в сложном условии, чтобы оно стало более "читаемым".
    После if/else/elif ставится двоеточие, а само условие пишется с отступом в 4 пробела (табуляция).
"""

if login == "1234":
    print("Слишком просто!")
elif login == "4321":
    print("Тоже слишком просто!")
else:
    print("Слишком сложно!")

"""
    elif (else if) от if заключается в том, что проверка этого условие будет происходить
    только тогда, когда все предыдущие условия оказались ложными.
"""

# Циклы (while/for)
# While - цикл с условием

name = input()
while name != "Вася":
    print("Привет, незнакомец!")
    name = input()

"""
    Пока у нас переменная name не будет равна "Вася", то у нас в консоль будет печататься
    "Привет, незнакомец!" и переменная name будет вводиться заново.
"""

# Цикл for
# Здесь синтаксис совершенно не похож на Java

for i in range(10):
    print(i)
"""
    Этот код выведет числа от 0 до 9. После for мы пишем переменную, которую хотим использовать,
    затем пишем in, затем пишем функцию range, у которой в скобках указывается число, до которого
    будет идти переменная i не включительно, то есть в случае выше она идёт от 0 до 9.
    
    Аналог кода выше на Java:
    for(int i = 0; i < 10; i++){
        System.out.println(i);
    }
    
    У функции range есть ещё 2 необязательных параметра:
    Если написать:
    for i in range(1, 10), то переменная i будет принимать значения от 1 до 9.
    Если написать:
    for i in range(1, 10, 2), то переменная i будет принимать значение от 1 до до 9 с шагом 2
    (1, 3, 5, 7, 9). Шаг также может быть отрицательным.
"""

"""
    Перед тем как перейти к спискам (массивам), расскажу ещё пару моментов. В питоне нет
    инкрементов/декрементов (то есть мы не можем писать a++, ++a, a--, --a), вместо них
    мы используем обычную запись:
    a = a + 1 (a += 1 - более короткая запись)
    a -= 1
    
    Новые операции:
    
    // - целочисленное деление
    ** - возведение в степень
    
    Примеры:
"""

a = 5
b = 2
print(a / b)  # Вывод: 2.5
print(a // b)  # Вывод: 2
print(a ** b)  # Вывод: 25

"""
    Списки - стандартные массивы в питоне. В джаве они тоже есть (вы их проходили в 3 модуле).
    Списки могут расширяться, то есть в них можно добавлять элементы и удалять их оттуда.
    Примеры:
"""

sp = [1, 2, 5, 7, 9]
print(sp[0])  # Вывод: 1 - это первый элемент списка
print(sp[2])  # Вывод: 5
print(sp[-1])  # Вывод: 9 - отрицательное число - отсчёт с конца списка

del sp[4]  # Удалит девятку из списка
sp.append(10)  # Добавляет число 10 в список

# Можно также создать пустой список и добавлять туда элементы

sp = []
for i in range(0, 10, 2):
    sp.append(i)
print(sp)  # Вывод: [0, 2, 4, 6, 8]

# В списке также могут быть данные разных типов, но это редко используется:

sp = [1234, "Hello", 55.23, 'c']

# Также есть и другие структуры данных, но о них чуть позже

"""
    Цикл по элементам (for each). Вместо функции range можно написать переменную какого-либо
    списка, и тогда переменная цикла будет принимать значение внутри этого списка. Примеры:
"""

sp = [12, 6, 3, 2, 8, 76, 385]
for i in range(len(sp)):  # len() - функция, которая находит длину списка или строки
    print(sp[i])
    
# Этот код выведет все элементы списка. Но можно использовать for each:

for i in sp:
    print(i)  # Тогда i принимает значение элементов списка

"""
    Аналог кода выше на Java:
    int[] sp = {12, 6, 3, 2, 8, 76, 385};
    for(int i = 0; i < sp.length; i++){
        System.out.println(sp[i]);
    }
    
    for(int i: sp){
        System.out.println(i);
    }
"""

# О функциях поподробнее на следующем занятии)
